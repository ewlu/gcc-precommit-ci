name: "Report Build Complete Status"
description: "create report and posts to patchwork"
inputs:
  build_status:
    description: 'Build status'
    required: true
  patch_name:
    description: 'Name of patch'
    required: true
  build_log_name:
    description: 'Name of build log'
    required: true
  target:
    description: 'libc-arch-abi-multilib'
    required: true
  baseline_hash:
    description: 'baseline gcc hash'
    required: true
  tot_hash:
    description: 'tip of tree gcc hash'
    required: true
  build_only:
    description: 'is build only'
    required: true
  issue_num:
    description: 'issue id'
    required: true
  build_comment_id:
    description: 'comment id'
    required: true
  additional_info:
    description: 'link to issue comment'
    required: true
  github_token:
    description: 'github token'
    required: true
  gist_token:
    description: 'gist token'
    required: true
  patchwork_token:
    description: 'patchwork token'
    required: true

runs:
  using: "composite"
  steps:
      - name: Build success report
        if: ${{ inputs.build_status == 'success' }}
        shell: bash
        working-directory: riscv-gnu-toolchain
        run: |
          if [ '${{ inputs.build_only }}' == 'true' ]; then export HASH=${{ inputs.tot_hash }}; else export HASH=${{ inputs.baseline_hash }}; fi
          python scripts/update_issue_status.py -token ${{ inputs.github_token }} -state 'Success' -comment ${{ inputs.build_comment_id }} -target ${{ inputs.target }} -check 'Build GCC' -repo ewlu/gcc-precommit-ci -baseline $HASH
          printf "\n[Additional information](${{ inputs.additional_info }})\n" >> comment.md

      - name: Build combined stdout/stderr gist
        if: ${{ inputs.build_status == 'failure' }}
        id: tail-gist-url
        shell: bash
        working-directory: riscv-gnu-toolchain
        run: |
          ONE_MB_IN_BYTES=1048000
          tail -c $ONE_MB_IN_BYTES build/${{ inputs.build_log_name }}.log >> gist.md
          python3 ./scripts/create_gist.py --token ${{ inputs.gist_token }} --input gist.md --output gist_url.txt --title ${{ inputs.issue_num }}_${{ inputs.patch_name }}_${{ inputs.build_log_name }}.log
          GIST_URL=$(cat gist_url.txt)
          echo "gist url: $GIST_URL"
          RAW_GIST_URL=$GIST_URL/raw/${{ inputs.issue_num }}_${{ inputs.patch_name }}_${{ inputs.build_log_name }}.log
          echo "raw gist url: $RAW_GIST_URL"
          echo "gist_url=$RAW_GIST_URL" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Build stderr report gist
        if: ${{ inputs.build_status == 'failure' }}
        id: stderr-gist-url
        shell: bash
        working-directory: riscv-gnu-toolchain
        run: |
          ONE_MB_IN_BYTES=1048000
          tail -c $ONE_MB_IN_BYTES build/${{ inputs.build_log_name }}-stderr.log >> gist.md
          python3 ./scripts/create_gist.py --token ${{ inputs.gist_token }} --input gist.md --output gist_url.txt --title ${{ inputs.issue_num }}_${{ inputs.patch_name }}_${{ inputs.build_log_name }}-stderr.log
          GIST_URL=$(cat gist_url.txt)
          echo "gist url: $GIST_URL"
          RAW_GIST_URL=$GIST_URL/raw/${{ inputs.issue_num }}_${{ inputs.patch_name }}_${{ inputs.build_log_name }}-stderr.log
          echo "raw gist url: $RAW_GIST_URL"
          echo "gist_url=$RAW_GIST_URL" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Build failure report
        if: ${{ inputs.build_status == 'failure' }}
        shell: bash
        working-directory: riscv-gnu-toolchain
        run: |
          if [ '${{ inputs.build_only }}' == 'true' ]; then export HASH=${{ inputs.tot_hash }}; else export HASH=${{ inputs.baseline_hash }}; fi
          python scripts/update_issue_status.py -token ${{ inputs.github_token }} -state 'Build failure. Please check the ${{ inputs.build_log_name }} artifact. [Tail Preview (1MB)](${{ steps.tail-gist-url.outputs.gist_url }}), [Stderr preview](${{ steps.stderr-gist-url.outputs.gist_url }})' -comment ${{ inputs.build_comment_id }} -target ${{ inputs.target }} -check 'Build GCC' -repo ewlu/gcc-precommit-ci -baseline $HASH
          printf "\n[Additional information](${{ inputs.additional_info }})\n" >> comment.md

      - name: Update build complete report comment
        uses: ./.github/actions/update-comment
        with:
          comment_id: ${{ inputs.build_comment_id }}
          file_path: riscv-gnu-toolchain/comment.md
          token: ${{ inputs.github_token }}

      - name: Add build-failure label
        if: ${{ inputs.build_status == 'failure' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ inputs.issue_num }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['build-failure']
            })

      - name: Report error on build-failure
        if: ${{ inputs.build_status == 'failure' && github.workflow != 'Staging' }}
        shell: bash
        working-directory: riscv-gnu-toolchain
        run: |
          python scripts/post_check_to_patchworks.py -event ${{ github.event_name }} -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }})  -desc 'Build failed' -iid '${{ inputs.issue_num }}#issuecomment-${{ inputs.build_comment_id }}' -state 'fail' -context 'build--${{ inputs.target }}' -token '${{ inputs.patchwork_token }}'
        continue-on-error: true

      - name: Report build success
        if: ${{ inputs.build_status == 'success' && github.workflow != 'Staging' }}
        shell: bash
        working-directory: riscv-gnu-toolchain
        run: |
          python scripts/post_check_to_patchworks.py -event ${{ github.event_name }} -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }})  -desc 'Build passed' -iid '${{ inputs.issue_num }}#issuecomment-${{ inputs.build_comment_id }}' -state 'success' -context 'build--${{ inputs.target }}' -token '${{ inputs.patchwork_token }}'
        continue-on-error: true
