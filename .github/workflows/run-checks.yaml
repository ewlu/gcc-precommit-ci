name: Run checks

on:
  workflow_call:
    inputs:
      patch_name:
        required: true
        type: string
      baseline_hash: # Baseline gcc hash
        required: true
        type: string
      tot_hash: # Tip of tree gcc hash
        required: true
        type: string
      original_patch_issue_num:
        required: false
        type: string

jobs:
  download_patches:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    steps:
      - uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/common/setup-env
        with:
          free_up_space: false

      - name: Download patch urls artifact
        uses: actions/download-artifact@v4
        with:
          name: patch_urls
          path: ./riscv-gnu-toolchain

      - name: Download patchworks urls artifact
        uses: actions/download-artifact@v4
        with:
          name: patchworks_metadata_files
          path: ./riscv-gnu-toolchain

      - name: Extract downloaded files
        run: |
          unzip patch_files.zip
          unzip patchworks_metadata_files.zip

      - name: Download patches from urls
        run: |
          mkdir patches
          scripts/download_patches.sh -p ${{ inputs.patch_name }}
          mv patchworks_metadata/${{ inputs.patch_name }} patches/

      - name: Zip patches
        run: |
          zip -r ${{ inputs.patch_name }}-downloaded-patches.zip patches

      - name: Upload patches artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.patch_name }}-downloaded-patches
          path: |
            riscv-gnu-toolchain/${{ inputs.patch_name }}-downloaded-patches.zip
          retention-days: 90

  create-issue:
    needs: [download_patches]
    runs-on: ubuntu-20.04
    permissions:
      issues: write
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    steps:
      - uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/common/setup-env
        with:
          free_up_space: false

      - name: Download patches artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.patch_name }}-downloaded-patches
          path: ./riscv-gnu-toolchain

      - name: Extract patches
        run: |
          unzip ${{ inputs.patch_name }}-downloaded-patches.zip

      - name: Build initial issue
        run: |
          printf "## Precommit CI Run information\n" > issue.md
          printf "Logs can be found in the associated Github Actions run: https://github.com/ewlu/gcc-precommit-ci/actions/runs/${{ github.run_id }}\n" >> issue.md
          printf "## Patch information\n" >> issue.md
          head -n 3 patches/${{ inputs.patch_name }} >> issue.md
          # Issue closer depends on patch id
          printf "Patch id: %d\n" $(tail -n 1 patches/${{ inputs.patch_name }}) >> issue.md
          printf "## Build Targets\n" >> issue.md
          printf "Some targets are built as multilibs. If a build target ends with \`multilib\`, please refer to the table below to see all the targets within that multilib.\n" >> issue.md
          printf "|Target name|\`-march\` string|\n" >> issue.md
          printf "|-|-|\n" >> issue.md
          printf "|newlib-rv64gcv-lp64d-multilib|\`rv64gcv-lp64d\`, \`rv32gc-ilp32d\`, \`rv64gc-lp64d\`, \`rv32imc_zba_zbb_zbc_zbs-ilp32\`|\n" >> issue.md
          printf "|linux-rv64gcv-lp64d-multilib|\`rv32gcv-ilp32d\`, \`rv64gcv-lp64d\`|\n" >> issue.md
          printf "|linux-rv64gc_zba_zbb_zbc_zbs-lp64d-multilib|\`rv32gc_zba_zbb_zbc_zbs-ilp32d\`, \`rv64gc_zba_zbb_zbc_zbs-lp64d\`|\n" >> issue.md
          printf "## Target Information\n" >> issue.md
          printf "|Target Shorthand|\`-march\` string|\n" >> issue.md
          printf "|-|-|\n" >> issue.md
          printf "|Bitmanip|\`gc_zba_zbb_zbc_zbs\`|\n" >> issue.md
          printf "## Notes\n" >> issue.md
          echo "Testsuite results use a more lenient allowlist to reduce error reporting with flakey tests. Please take a look at the current [allowlist](https://github.com/ewlu/gcc-precommit-ci/tree/main/test/allowlist)." >> issue.md
          echo "Results come from a [sum file comparator](https://github.com/patrick-rivos/riscv-gnu-toolchain/blob/a0a8cabf8ca71bdfbb41e23ab599af9528af772c/scripts/compare_testsuite_log.py). Each patch is applied to a well known, non-broken baseline taken from our" >> issue.md
          echo "gcc postcommit framework ([here](https://github.com/patrick-rivos/gcc-postcommit-ci/issues)) which runs the full gcc testsuite every 6 hours." >> issue.md
          echo "If you have any questions or encounter any issues which may seem like false-positives, please contact us at patchworks-ci@rivosinc.com" >> issue.md
          cat issue.md

      - name: Create initial issue
        uses: peter-evans/create-issue-from-file@v5
        id: create-issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          content-filepath: riscv-gnu-toolchain/issue.md
          title: 'Patch Status ${{ inputs.patch_name }}'

      - name: Add Staging Label to issue
        if: ${{ github.workflow == 'Staging' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ steps.create-issue.outputs.issue-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['staging']
            })

      - name: Build additional info link
        id: link
        run: |
          sleep 1
          curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Token ${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/ewlu/gcc-precommit-ci/issues/${{ steps.create-issue.outputs.issue-number }} | jq '.id' > issue_body_comment_id.txt
          export LINK=https://github.com/ewlu/gcc-precommit-ci/issues/${{ steps.create-issue.outputs.issue-number }}#issue-$(cat issue_body_comment_id.txt)
          echo $LINK
          echo "additional=$LINK" >> $GITHUB_OUTPUT


      - name: Make lint pending comment
        run: |
          echo "## Lint Status" > lint_pending.md
          echo "Lint pending" >> lint_pending.md

      - name: Create lint report comment
        uses: peter-evans/create-or-update-comment@v4
        id: lint-comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          issue-number: ${{ steps.create-issue.outputs.issue-number }}
          body-path: riscv-gnu-toolchain/lint_pending.md
          edit-mode: replace

      - name: Create apply pending report
        run: |
          python scripts/generate_apply_report.py -patch ${{ inputs.patch_name }} -bhash ${{ inputs.baseline_hash }} -thash ${{ inputs.tot_hash }} -bstatus pending -tstatus pending -o comment.md
          printf "\n[Additional information](${{ steps.link.outputs.additional }})\n" >> comment.md

      - name: Create apply report comment
        uses: peter-evans/create-or-update-comment@v4
        id: apply-comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          issue-number: ${{ steps.create-issue.outputs.issue-number }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace

    outputs:
      issue_num: ${{ steps.create-issue.outputs.issue-number }}
      lint_comment_id: ${{ steps.lint-comment.outputs.comment-id }}
      apply_comment_id: ${{ steps.apply-comment.outputs.comment-id }}
      additional_info: ${{ steps.link.outputs.additional }}

  lint:
    needs: [download_patches, create-issue]
    uses: ./.github/workflows/lint.yaml
    permissions:
      issues: write
    with:
      patch_name: ${{ inputs.patch_name }}
      issue_num: ${{ needs.create-issue.outputs.issue_num }}
      lint_comment_id: ${{ needs.create-issue.outputs.lint_comment_id }}
      additional_info: ${{ needs.create-issue.outputs.additional_info }}
      baseline_hash: ${{ inputs.baseline_hash }}
    secrets: inherit

  apply:
    needs: [download_patches, create-issue]
    runs-on: ubuntu-20.04
    environment: production
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    steps:
      - uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/common/setup-env
        with:
          free_up_space: false

      - name: Restore submodules from cache
        uses: actions/download-artifact@v4
        with:
          name: gcc-sources-${{ inputs.baseline_hash }}
          path: ./riscv-gnu-toolchain

      - name: Restore submodules
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc newlib qemu
          unzip cache.zip
          rm -rf cache.zip

      - name: Download patches artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.patch_name }}-downloaded-patches
          path: ./riscv-gnu-toolchain

      - name: Extract patches
        run: |
          unzip ${{ inputs.patch_name }}-downloaded-patches.zip

      - name: Checkout gcc hash
        run: |
          cd gcc
          git checkout ${{ inputs.baseline_hash }}

      - name: Apply patches to baseline
        id: apply-baseline
        run: |
          cd gcc
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git am ../patches/*.patch --whitespace=fix -q --3way --empty=drop &> out_base || true
          cat out_base
          if [[ $(cat out_base | wc -l) != 0 ]]; then
            git am --show-current-patch=diff
            echo "Failed to apply patch cleanly to baseline hash"
            echo "\`\`\`" >> out_base
            git am --show-current-patch=diff &>> out_base
            echo "\`\`\`" >> out_base
            git am --abort
            echo "apply_baseline=false" >> $GITHUB_OUTPUT
          else
            echo "apply_baseline=true" >> $GITHUB_OUTPUT
            git log --oneline ${{ inputs.baseline_hash }}^..HEAD > git_log_bl.txt 2>&1
          fi
        continue-on-error: true

      - name: Apply patches to tip of tree
        id: apply-tip-of-tree
        run: |
          cd gcc
          git reset --hard ${{ inputs.tot_hash }}
          git am ../patches/*.patch --whitespace=fix -q --3way --empty=drop &> out_tot || true
          cat out_tot
          if [[ $(cat out_tot | wc -l) != 0 ]]; then
            git am --show-current-patch=diff
            echo "Failed to apply patch cleanly to tip of tree"
            git am --show-current-patch=diff &>> out_tot
            git am --abort
            echo "apply_tot=false" >> $GITHUB_OUTPUT
          else
            echo "apply_tot=true" >> $GITHUB_OUTPUT
            git log --oneline ${{ inputs.tot_hash }}^..HEAD > git_log_tot.txt 2>&1
          fi
        continue-on-error: true

      - name: Check build only
        id: build-only
        if: ${{ steps.apply-baseline.outputs.apply_baseline == 'false' && steps.apply-tip-of-tree.outputs.apply_tot == 'true' }}
        run: |
          echo "build_only=true" >> $GITHUB_OUTPUT

      - name: Check early exit
        id: early-exit
        if: ${{ steps.apply-baseline.outputs.apply_baseline == 'false' && steps.apply-tip-of-tree.outputs.apply_tot == 'false' }}
        run: |
          echo "early_exit=true" >> $GITHUB_OUTPUT

      - name: Add Build-Only Label to issue
        if: ${{ steps.build-only.outputs.build_only == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ needs.create-issue.outputs.issue_num }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['build-only']
            })

      - name: Build apply report
        run: |
          python scripts/generate_apply_report.py -patch ${{ inputs.patch_name }} -bhash ${{ inputs.baseline_hash }} -thash ${{ inputs.tot_hash }} -bstatus ${{ steps.apply-baseline.outputs.apply_baseline }} -tstatus ${{ steps.apply-tip-of-tree.outputs.apply_tot }} -o comment.md
          head -c 65000 comment.md > trimmed_comment.md
          if [ $(cat trimmed_comment.md | wc -l) -ne $(cat comment.md | wc -l) ]; then printf "\n\`\`\`\nComment text has been trimmed. Please check logs for the untrimmed comment." >> trimmed_comment.md; fi
          printf "\n[Additional information](${{ needs.create-issue.outputs.additional_info }})\n" >> trimmed_comment.md

      - name: Update apply report comment
        uses: peter-evans/create-or-update-comment@v4
        id: apply-comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ needs.create-issue.outputs.apply_comment_id }}
          body-path: riscv-gnu-toolchain/trimmed_comment.md
          edit-mode: replace

      - name: Output check apply-failure
        id: apply-failure
        run: |
          if [[ "${{ steps.apply-baseline.outputs.apply_baseline }}" == "false" ]] && [[ "${{ steps.apply-tip-of-tree.outputs.apply_tot }}" == "false" ]];
          then
            echo "apply_failure=true" >> $GITHUB_OUTPUT
          else
            echo "apply_failure=false" >> $GITHUB_OUTPUT
          fi

      - name: Report patch failed to apply to tip of tree
        if: ${{ steps.apply-baseline.outputs.apply_baseline == 'true' && steps.apply-tip-of-tree.outputs.apply_tot == 'false' && github.workflow != 'Staging' }}
        run: |
          python scripts/post_check_to_patchworks.py -event ${{ github.event_name }} -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }}) -desc 'Patch failed to apply to tip of tree.' -iid '${{ needs.create-issue.outputs.issue_num }}#issuecomment-${{ needs.create-issue.outputs.apply_comment_id }}' -state 'warning' -context 'apply-patch' -token ${{ secrets.PATCHWORK_API }}
        continue-on-error: true

      - name: Report patch applied to tip of tree successfully
        if: ${{ steps.apply-tip-of-tree.outputs.apply_tot == 'true' && github.workflow != 'Staging' }}
        run: |
          python scripts/post_check_to_patchworks.py -event ${{ github.event_name }} -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }}) -desc 'Patch applied' -iid '${{ needs.create-issue.outputs.issue_num }}#issuecomment-${{ needs.create-issue.outputs.apply_comment_id }}' -state 'success' -context 'apply-patch' -token ${{ secrets.PATCHWORK_API }}
        continue-on-error: true

      - name: Report patch failed to apply anywhere
        if: ${{ steps.apply-failure.outputs.apply_failure == 'true' && github.workflow != 'Staging' }}
        run: |
          python scripts/post_check_to_patchworks.py -event ${{ github.event_name }} -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }}) -desc 'Patch failed to apply' -iid '${{ needs.create-issue.outputs.issue_num }}#issuecomment-${{ needs.create-issue.outputs.apply_comment_id }}' -state 'fail' -context 'apply-patch' -token ${{ secrets.PATCHWORK_API }}
        continue-on-error: true

      - name: Add apply-failure label if patch failed to apply anywhere
        if: ${{ steps.apply-failure.outputs.apply_failure == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ needs.create-issue.outputs.issue_num }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['apply-failure']
            })

      - name: Output the hash after the patch has been applied
        id: new-gcc-hash
        if: ${{ steps.apply-failure.outputs.apply_failure == 'false' }}
        run: |
          cd gcc
          git reset --hard ${{ inputs.tot_hash }}
          if [ "${{ steps.apply-baseline.outputs.apply_baseline }}" == "true" ]; then
            git checkout ${{ inputs.baseline_hash }}
          fi
          git am ../patches/*.patch --whitespace=fix --3way --empty=drop
          export PATCH_APPLIED_GCCHASH=$(git rev-parse HEAD)
          echo $PATCH_APPLIED_GCCHASH
          echo "patch_applied_gcchash=$PATCH_APPLIED_GCCHASH" >> $GITHUB_OUTPUT

    outputs:
      early_exit: ${{ steps.early-exit.outputs.early_exit }}
      build_only: ${{ steps.build-only.outputs.build_only }}
      patch_applied_gcchash: ${{ steps.new-gcc-hash.outputs.patch_applied_gcchash }}
      apply_failure: ${{ steps.apply-failure.outputs.apply_failure }}


  ################################################################################
  #                         Originally build-target.yaml                         #
  ################################################################################

  initialize-build-test-comments:
    needs: [download_patches, create-issue, apply]
    if: ${{ needs.apply.outputs.early_exit != 'true' }}
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    steps:
      - uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/common/setup-env
        with:
          free_up_space: false

      - name: Download patches artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.patch_name }}-downloaded-patches
          path: ./riscv-gnu-toolchain

      - name: Extract patches
        run: |
          unzip ${{ inputs.patch_name }}-downloaded-patches.zip

      - name: Create build pending comment
        run: |
          echo "## Build GCC Status" > build_pending_comment.md
          printf "\n[Additional information](${{ needs.create-issue.outputs.additional_info }})\n" >> build_pending_comment.md

      - name: Create build report comment
        uses: peter-evans/create-or-update-comment@v4
        id: build-comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          issue-number: ${{ needs.create-issue.outputs.issue_num }}
          body-path: riscv-gnu-toolchain/build_pending_comment.md
          edit-mode: replace

      - name: Create test waiting comment
        run: |
          echo "## Testsuite Status" > comment.md
          echo "Waiting for build to complete." >> comment.md
          printf "\n[Additional information](${{ needs.create-issue.outputs.additional_info }})\n" >> comment.md

      - name: Create build only report
        if: ${{ needs.apply.outputs.build_only == 'true' }}
        run: |
          echo "## Testsuite Status" > comment.md
          echo "Testsuite tests were skipped. Patch did not apply to baseline hash https://github.com/gcc-mirror/gcc/commit/${{ inputs.baseline_hash }}. No comparison applicable." >> comment.md
          printf "\n[Additional information](${{ needs.create-issue.outputs.additional_info }})\n" >> comment.md

      - name: Create build report comment
        uses: peter-evans/create-or-update-comment@v4
        id: test-comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          issue-number: ${{ needs.create-issue.outputs.issue_num }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace

      - name: Report test warning on build only
        if: ${{ needs.apply.outputs.build_only == 'true' && github.workflow != 'Staging' }}
        run: |
          python scripts/post_check_to_patchworks.py -event ${{ github.event_name }} -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }})  -desc 'Testing skipped' -iid '${{ needs.create-issue.outputs.issue_num }}#issuecomment-${{ steps.test-comment.outputs.comment-id }}' -state 'warning' -context 'test' -token '${{ secrets.PATCHWORK_API }}' -repo ewlu/gcc-precommit-ci
        continue-on-error: true

    outputs:
      build_comment_id: ${{ steps.build-comment.outputs.comment-id }}
      test_comment_id: ${{ steps.test-comment.outputs.comment-id }}

  # Single target build-only for build warning comparisons
  creg: # Check Regressions. Short name so I can see the matrix string in github
    needs: [download_patches, create-issue, apply, initialize-build-test-comments]
    strategy:
      fail-fast: false
      matrix:
        mode: [linux, newlib]
        target:
          [
            rv64gc-lp64d,
          ]
        multilib: [non-multilib]
    uses: ./.github/workflows/test-regression.yaml
    with:
      patch_name: ${{ inputs.patch_name }}
      mode: ${{ matrix.mode }}
      target: ${{ matrix.target }}
      baseline_hash: ${{ inputs.baseline_hash }}
      patch_applied_gcchash: ${{ needs.apply.outputs.patch_applied_gcchash }}
      multilib: ${{ matrix.multilib }}
      build_only: 'run_warnings'
      issue_num: ${{ needs.create-issue.outputs.issue_num }}
      build_comment_id: ${{ needs.initialize-build-test-comments.outputs.build_comment_id }}
      test_comment_id: ${{ needs.initialize-build-test-comments.outputs.test_comment_id }}
      run_on_self_hosted: false
      tot_hash: ${{ inputs.tot_hash }}
      additional_info: ${{ needs.create-issue.outputs.additional_info }}
    secrets: inherit

  cmreg-linux-sh: # Bitmanip self hosted runner multilib build
    needs: [download_patches, create-issue, apply, initialize-build-test-comments]
    strategy:
      fail-fast: false
      matrix:
        mode: [linux]
        target: [rv64gc_zba_zbb_zbc_zbs-lp64d] # Dummy placeholder. Actually runs rv32/rv64 multilib
        multilib: [multilib]
    uses: ./.github/workflows/test-regression.yaml
    with:
      patch_name: ${{ inputs.patch_name }}
      mode: ${{ matrix.mode }}
      target: ${{ matrix.target }}
      baseline_hash: ${{ inputs.baseline_hash }}
      patch_applied_gcchash: ${{ needs.apply.outputs.patch_applied_gcchash }}
      multilib: ${{ matrix.multilib }}
      build_only: ${{ needs.apply.outputs.build_only }}
      issue_num: ${{ needs.create-issue.outputs.issue_num }}
      build_comment_id: ${{ needs.initialize-build-test-comments.outputs.build_comment_id }}
      test_comment_id: ${{ needs.initialize-build-test-comments.outputs.test_comment_id }}
      run_on_self_hosted: true
      tot_hash: ${{ inputs.tot_hash }}
      additional_info: ${{ needs.create-issue.outputs.additional_info }}
    secrets: inherit

  creg-sh: # Vector self hosted runners multilib build
    needs: [download_patches, create-issue, apply, initialize-build-test-comments]
    strategy:
      fail-fast: false
      matrix:
        mode: [newlib, linux]
        target:
          [ rv64gcv-lp64d ] # Dummy placeholder. runs rv32/64gcv
        multilib: [multilib]
    uses: ./.github/workflows/test-regression.yaml
    with:
      patch_name: ${{ inputs.patch_name }}
      mode: ${{ matrix.mode }}
      target: ${{ matrix.target }}
      baseline_hash: ${{ inputs.baseline_hash }}
      patch_applied_gcchash: ${{ needs.apply.outputs.patch_applied_gcchash }}
      multilib: ${{ matrix.multilib }}
      build_only: ${{ needs.apply.outputs.build_only }}
      issue_num: ${{ needs.create-issue.outputs.issue_num }}
      build_comment_id: ${{ needs.initialize-build-test-comments.outputs.build_comment_id }}
      test_comment_id: ${{ needs.initialize-build-test-comments.outputs.test_comment_id }}
      run_on_self_hosted: true
      tot_hash: ${{ inputs.tot_hash }}
      additional_info: ${{ needs.create-issue.outputs.additional_info }}
    secrets: inherit

  summarize:
    if: ${{ !cancelled() && needs.apply.outputs.apply_failure == 'false' }} # Generate github issues even when some (or all) targets fail to build. Ignore apply failures since there are no artifacts expected.
    needs: [download_patches, create-issue, apply, initialize-build-test-comments, cmreg-linux-sh, creg-sh]
    permissions:
      issues: write
    uses: ./.github/workflows/generate-precommit-summary.yaml
    with:
      patch_name: ${{ inputs.patch_name }}
      baseline_hash: ${{ inputs.baseline_hash }}
      patch_applied_gcchash: ${{ needs.apply.outputs.patch_applied_gcchash }}
      build_only: ${{ needs.apply.outputs.build_only }}
      tot_hash: ${{ inputs.tot_hash }}
      issue_num: ${{ needs.create-issue.outputs.issue_num }}
      build_comment_id: ${{ needs.initialize-build-test-comments.outputs.build_comment_id }}
      test_comment_id: ${{ needs.initialize-build-test-comments.outputs.test_comment_id }}
      additional_info: ${{ needs.create-issue.outputs.additional_info }}
    secrets: inherit

  link-staging-issue:
    needs: [download_patches, create-issue, apply, initialize-build-test-comments, cmreg-linux-sh, creg-sh, summarize]
    if: ${{ !cancelled() && inputs.original_patch_issue_num != '' }}
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    steps:
      - uses: actions/checkout@v4

      - name: Link Staging Issue to Original Issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ needs.create-issue.outputs.issue_num }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Comparing against #${{ inputs.original_patch_issue_num }} for branch: ${{ github.event.pull_request.head.ref }}'
            })
