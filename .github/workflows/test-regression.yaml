name: Test-Regression

on:
  workflow_call:
    inputs:
      patch_name:
        required: true
        type: string
      mode:
        required: true
        type: string
      target:
        required: true
        type: string
      baseline_hash:
        required: true
        type: string
      patch_applied_gcchash:
        required: true
        type: string
      multilib:
        required: true
        type: string
      build_only:
        required: true
        type: string
      issue_num:
        required: true
        type: string
      build_comment_id:
        required: true
        type: string
      test_comment_id:
        required: true
        type: string
      run_on_self_hosted:
        required: true
        type: string
      tot_hash:
        required: true
        type: string
      additional_info:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-20.04
    environment: production
    if: ${{ inputs.run_on_self_hosted != 'true' }}
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    steps:
      - uses: actions/checkout@v3

      - name: Setup env
        uses: ./.github/actions/common/setup-env
        with:
          free_up_space: true

      - name: Restore submodules from cache
        uses: actions/download-artifact@v3
        with:
          name: gcc-sources-${{ inputs.baseline_hash }}
          path: ./riscv-gnu-toolchain

      - name: Restore submodules
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc newlib qemu
          unzip cache.zip
          rm -rf cache.zip

      - name: Download patches artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.patch_name }}-downloaded-patches
          path: ./riscv-gnu-toolchain

      - name: Extract patches
        run: |
          unzip ${{ inputs.patch_name }}-downloaded-patches.zip

      - name: Checkout gcc hash
        run: |
          cd gcc
          git fetch
          git checkout ${{ inputs.baseline_hash }}

      - name: Checkout trunk gcc hash
        if: ${{ inputs.build_only == 'true' }}
        run: |
          cd gcc
          git checkout ${{ inputs.tot_hash }}

      - name: Apply patches
        run: |
          cd gcc
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git am ../patches/*.patch --whitespace=fix --3way
          echo $(git rev-parse HEAD)

      - name: Build pending comment
        run: |
          if [ '${{ inputs.build_only }}' == 'true' ]; then
            python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Pending' -comment ${{ inputs.build_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Build GCC' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.tot_hash }}
          else
            python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Pending' -comment ${{ inputs.build_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Build GCC' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.baseline_hash }}
          fi
          printf "\n[Additional information](${{ inputs.additional_info }})\n" >> comment.md

      - name: Update build pending report comment
        uses: peter-evans/create-or-update-comment@v3
        id: build-pending
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.build_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace
        continue-on-error: true

      - name: backoff
        if: ${{ steps.build-pending.outcome == 'failure' }}
        run: |
          sleep 10

      - name: Retry build pending report comment
        if: ${{ steps.build-pending.outcome == 'failure' }}
        uses: peter-evans/create-or-update-comment@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.build_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace

      - name: Report build
        run: |
          python scripts/post_check_to_patchworks.py -event ${{ github.event_name }} -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }})  -desc 'Build started' -iid '${{ inputs.issue_num }}#issuecomment-${{ inputs.build_comment_id }}' -state 'pending' -context 'build--${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }}' -token '${{ secrets.PATCHWORK_API }}'
        continue-on-error: true

      - name: Make log name
        id: build-log
        run: |
          export BUILD_LOG_NAME=$(tail -n 1 patches/${{ inputs.patch_name }})-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }}-build-log
          echo "build_log_name=$BUILD_LOG_NAME" >> $GITHUB_OUTPUT

      ### begin common

      - name: Install dependencies
        run: | 
          sudo ./.github/setup-apt.sh
          sudo apt install python3 -y
          sudo apt install python-is-python3 -y

      - name: Configure
        run: |
          mkdir build
          cd build
          if [ "${{ inputs.multilib }}" == "multilib" ]; then
            ../configure --prefix=$(pwd) --with-multilib-generator="rv64gc-lp64d--;rv32gc-ilp32d--"
          else
            TARGET_TUPLE=($(echo ${{ inputs.target }} | tr "-" "\n"))
            ../configure --prefix=$(pwd) --with-multilib-generator="${TARGET_TUPLE[0]}-${TARGET_TUPLE[1]}--"
          fi

      - name: Make gcc
        id: build-gcc
        run: |
          cd build
          set -o pipefail
          make -j $(nproc) ${{ inputs.mode }} 2>&1 | tee ${{ steps.build-log.outputs.build_log_name }}.txt
          set +o pipefail

      - name: Remove sources to reclaim disk space
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc newlib qemu

      - name: Zip binaries
        run: |
          zip -r gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.patch_applied_gcchash }}-${{ inputs.multilib }}.zip build/bin

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.patch_applied_gcchash }}-${{ inputs.multilib }}
          path: |
            riscv-gnu-toolchain/gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.patch_applied_gcchash }}-${{ inputs.multilib }}.zip
          retention-days: 5

      # Running testsuite (stamps/check-gcc-*) only uses stage2 & assorted folders
      - name: Zip stage2
        run: |
          zip --symlinks -r stage2.zip build

      - name: Upload stage2 artifact
        uses: actions/upload-artifact@v3
        with:
          name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.patch_applied_gcchash }}-${{ inputs.multilib }}-stage2
          path: |
            riscv-gnu-toolchain/stage2.zip
          retention-days: 5

      - name: Output success
        id: build-success
        run: |
          export BUILD_SUCCESS="success"
          echo $BUILD_SUCCESS
          echo "build_success=$BUILD_SUCCESS" >> "$GITHUB_OUTPUT"

      ### end common

      - name: Zip build log
        if: ${{ always() && steps.build-gcc.outcome == 'failure' }}
        run: |
          zip ${{ steps.build-log.outputs.build_log_name }}.zip build/${{ steps.build-log.outputs.build_log_name }}.txt

      - name: Upload build log
        if: ${{ always() && steps.build-gcc.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build-log.outputs.build_log_name }}
          path: |
            riscv-gnu-toolchain/${{ steps.build-log.outputs.build_log_name }}.zip
          retention-days: 90

      - name: Build success report
        run: |
          if [ '${{ inputs.build_only }}' == 'true' ]; then
            python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Success' -comment ${{ inputs.build_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Build GCC' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.tot_hash }}
          else
            python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Success' -comment ${{ inputs.build_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Build GCC' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.baseline_hash }}
          fi
          printf "\n[Additional information](${{ inputs.additional_info }})\n" >> comment.md

      - name: Build failure report
        if: ${{ always() && steps.build-gcc.outcome == 'failure' }}
        run: |
          if [ '${{ inputs.build_only }}' == 'true' ]; then
            python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Build failure. Please check the ${{ steps.build-log.outputs.build_log_name }} artifact' -comment ${{ inputs.build_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Build GCC' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.tot_hash }}
          else
            python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Build failure. Please check the ${{ steps.build-log.outputs.build_log_name }} artifact' -comment ${{ inputs.build_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Build GCC' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.baseline_hash }}
          fi
          printf "\n[Additional information](${{ inputs.additional_info }})\n" >> comment.md

      - name: Update build complete report comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@v3
        id: build-complete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.build_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace
        continue-on-error: true

      - name: backoff
        if: ${{ always() && steps.build-complete.outcome == 'failure' }}
        run: |
          sleep 10

      - name: Retry build pending report comment
        if: ${{ always() && steps.build-complete.outcome == 'failure' }}
        uses: peter-evans/create-or-update-comment@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.build_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace

      - name: Report error on build-failure
        if: ${{ always() && steps.build-gcc.outcome == 'failure' }}
        run: |
          python scripts/post_check_to_patchworks.py -event ${{ github.event_name }} -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }})  -desc 'Build failed' -iid '${{ inputs.issue_num }}#issuecomment-${{ inputs.build_comment_id }}' -state 'fail' -context 'build--${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }}' -token '${{ secrets.PATCHWORK_API }}'
        continue-on-error: true

      - name: Report build success
        run: |
          python scripts/post_check_to_patchworks.py -event ${{ github.event_name }} -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }})  -desc 'Build passed' -iid '${{ inputs.issue_num }}#issuecomment-${{ inputs.build_comment_id }}' -state 'success' -context 'build--${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }}' -token '${{ secrets.PATCHWORK_API }}'
        continue-on-error: true

    outputs:
      build_success: ${{ steps.build-success.outputs.build_success }}

  test:
    runs-on: ubuntu-20.04
    environment: production
    needs: [build]
    # Skip linux multilib
    if: ${{ inputs.build_only != 'true' && inputs.run_on_self_hosted != 'true' }}
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    steps:
      - uses: actions/checkout@v3

      - name: Setup env
        uses: ./.github/actions/common/setup-env
        with:
          free_up_space: true

      - name: Restore submodules from cache
        uses: actions/download-artifact@v3
        with:
          name: gcc-sources-${{ inputs.baseline_hash }}
          path: ./riscv-gnu-toolchain

      - name: Restore submodules
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc newlib qemu
          unzip cache.zip
          rm -rf cache.zip

      - name: Download patches artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.patch_name }}-downloaded-patches
          path: ./riscv-gnu-toolchain

      - name: Extract patches
        run: |
          unzip ${{ inputs.patch_name }}-downloaded-patches.zip

      - name: Checkout gcc hash
        run: |
          cd gcc
          git fetch
          git checkout ${{ inputs.baseline_hash }}

      - name: Apply patches to baseline
        run: |
          cd gcc
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git am ../patches/*.patch --whitespace=fix --3way
          echo $(git rev-parse HEAD)

      - name: Build test pending report
        run: |
          python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Pending' -comment ${{ inputs.test_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Testsuite' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.baseline_hash }}
          printf "\n[Additional information](${{ inputs.additional_info }})\n" >> comment.md

      - name: Update test pending report comment
        uses: peter-evans/create-or-update-comment@v3
        id: test-pending
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.test_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace
        continue-on-error: true

      - name: backoff
        if: ${{ steps.test-pending.outcome == 'failure' }}
        run: |
          sleep 10

      - name: Retry test pending report comment
        if: ${{ steps.test-pending.outcome == 'failure' }}
        uses: peter-evans/create-or-update-comment@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.test_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace

      - name: Report testing
        run: |
          python scripts/post_check_to_patchworks.py -event ${{ github.event_name }} -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }})  -desc 'Testing started' -iid '${{ inputs.issue_num }}#issuecomment-${{ inputs.test_comment_id }}' -state 'pending' -context 'test' -token 'PLACEHOLDER'
        continue-on-error: true

      - name: Install dependencies
        run: |
          sudo ./.github/setup-apt.sh
          sudo apt install python3 -y
          sudo apt install python-is-python3 -y

      - name: Configure
        run: |
          mkdir build
          cd build
          if [ "${{ inputs.multilib }}" == "multilib" ]; then
            ../configure --prefix=$(pwd) --with-multilib-generator="rv64gc-lp64d--;rv32gc-ilp32d--"
          else
            TARGET_TUPLE=($(echo ${{ inputs.target }} | tr "-" "\n"))
            ../configure --prefix=$(pwd) --with-multilib-generator="${TARGET_TUPLE[0]}-${TARGET_TUPLE[1]}--"
          fi

      - name: Restore Stage2 Artifacts
        uses: ./.github/actions/common/restore-stage-2
        with:
          mode: ${{ inputs.mode }}
          target: ${{ inputs.target }}
          gcchash: ${{ inputs.patch_applied_gcchash }}
          multilib: ${{ inputs.multilib }}

      - name: Run Testsuite
        uses: ./.github/actions/common/run-testsuite
        with:
          mode: ${{ inputs.mode }}
          target: ${{ inputs.target }}
          gcchash: ${{ inputs.patch_applied_gcchash }}
          multilib: ${{ inputs.multilib }}

      - name: Build test complete report
        run: |
          python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Complete. Full report will be displayed once all targets are complete' -comment ${{ inputs.test_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Testsuite' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.baseline_hash }}
          printf "\n[Additional information](${{ inputs.additional_info }})\n" >> comment.md

      - name: Update test complete report comment
        uses: peter-evans/create-or-update-comment@v3
        id: test-complete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.test_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace
        continue-on-error: true

      - name: backoff
        if: ${{ steps.test-complete.outcome == 'failure' }}
        run: |
          sleep 10

      - name: Retry test complete report comment
        if: ${{ steps.test-complete.outcome == 'failure' }}
        uses: peter-evans/create-or-update-comment@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.test_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace

  # The self-hosted environment does not have the same path setup as the hosted runners
  # We need to rebuild since restoring the artifact won't work
  # (the new path will break the existing build).
  rerun-timeouts:
    runs-on: [self-hosted, build]
    environment: production
    needs: [build, test]
    if: ${{ failure() && needs.build.outputs.build_success == 'success' && inputs.run_on_self_hosted != 'true' }}
    timeout-minutes: 1440 # 24 hours
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    steps:
      - name: Cleanup build folder
        working-directory: ./
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - uses: actions/checkout@v3

      - name: Setup env
        uses: ./.github/actions/common/setup-env
        with:
          free_up_space: false

      - name: Restore submodules from cache
        uses: actions/download-artifact@v3
        with:
          name: gcc-sources-${{ inputs.baseline_hash }}
          path: ./riscv-gnu-toolchain

      - name: Restore submodules
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc newlib qemu
          unzip cache.zip
          rm -rf cache.zip

      - name: Download patches artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.patch_name }}-downloaded-patches
          path: ./riscv-gnu-toolchain

      - name: Extract patches
        run: |
          unzip ${{ inputs.patch_name }}-downloaded-patches.zip

      - name: Checkout gcc hash
        run: |
          cd gcc
          git fetch
          git checkout ${{ inputs.baseline_hash }}

      - name: Apply patches to baseline
        run: |
          cd gcc
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git am ../patches/*.patch --whitespace=fix --3way
          echo $(git rev-parse HEAD)

      - name: Install dependencies
        run: |
          sudo ./.github/setup-apt.sh
          sudo apt install python3 -y
          sudo apt install python-is-python3 -y

      - name: Configure
        run: |
          mkdir build
          cd build
          if [ "${{ inputs.multilib }}" == "multilib" ]; then
            ../configure --prefix=$(pwd) --with-multilib-generator="rv64gc-lp64d--;rv32gc-ilp32d--"
          else
            TARGET_TUPLE=($(echo ${{ inputs.target }} | tr "-" "\n"))
            ../configure --prefix=$(pwd) --with-multilib-generator="${TARGET_TUPLE[0]}-${TARGET_TUPLE[1]}--"
          fi

      - name: Build
        run: |
          cd build
          make ${{ inputs.mode }} -j $(nproc)

      - name: Run Testsuite
        uses: ./.github/actions/common/run-testsuite
        with:
          mode: ${{ inputs.mode }}
          target: ${{ inputs.target }}
          gcchash: ${{ inputs.patch_applied_gcchash }}
          multilib: ${{ inputs.multilib }}

      - name: Build test complete report
        run: |
          python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Complete. Full report will be displayed once all targets are complete' -comment ${{ inputs.test_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Testsuite' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.baseline_hash }}
          printf "\n[Additional information](${{ inputs.additional_info }})\n" >> comment.md

      - name: Update test complete report comment
        uses: peter-evans/create-or-update-comment@v3
        id: test-complete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.test_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace
        continue-on-error: true

      - name: backoff
        if: ${{ steps.test-complete.outcome == 'failure' }}
        run: |
          sleep 10

      - name: Retry test complete report comment
        if: ${{ steps.test-complete.outcome == 'failure' }}
        uses: peter-evans/create-or-update-comment@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.test_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace

  # The self-hosted environment does not have the same path setup as the hosted runners
  # We need to rebuild since restoring the artifact won't work
  # (the new path will break the existing build).
  run-on-self-hosted:
    runs-on: [self-hosted, build]
    environment: production
    if: ${{ inputs.run_on_self_hosted == 'true' }}
    timeout-minutes: 1440 # 24 hours
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    steps:
      - name: Cleanup build folder
        working-directory: ./
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - uses: actions/checkout@v3

      - name: Setup env
        uses: ./.github/actions/common/setup-env
        with:
          free_up_space: false

      - name: Restore submodules from cache
        uses: actions/download-artifact@v3
        with:
          name: gcc-sources-${{ inputs.baseline_hash }}
          path: ./riscv-gnu-toolchain

      - name: Restore submodules
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc newlib qemu
          unzip cache.zip
          rm -rf cache.zip

      - name: Download patches artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.patch_name }}-downloaded-patches
          path: ./riscv-gnu-toolchain

      - name: Extract patches
        run: |
          unzip ${{ inputs.patch_name }}-downloaded-patches.zip

      - name: Checkout gcc hash
        run: |
          cd gcc
          git fetch
          git checkout ${{ inputs.baseline_hash }}

      - name: Checkout gcc hash
        if: ${{ inputs.build_only == 'true' }}
        run: |
          cd gcc
          git reset --hard origin/master
          git pull origin master

      - name: Apply patches to baseline
        run: |
          cd gcc
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git am ../patches/*.patch --whitespace=fix --3way
          echo $(git rev-parse HEAD)

      - name: Update build pending issue
        run: |
          if [ '${{ inputs.build_only }}' == 'true' ]; then
            python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Pending' -comment ${{ inputs.build_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Build GCC' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.tot_hash }}
          else
            python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Pending' -comment ${{ inputs.build_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Build GCC' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.baseline_hash }}
          fi
          printf "\n[Additional information](${{ inputs.additional_info }})\n" >> comment.md

      - name: Update build pending report comment
        uses: peter-evans/create-or-update-comment@v3
        id: build-pending
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.build_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace
        continue-on-error: true

      - name: backoff
        if: ${{ steps.build-pending.outcome == 'failure' }}
        run: |
          sleep 10

      - name: Retry build pending report comment
        if: ${{ steps.build-pending.outcome == 'failure' }}
        uses: peter-evans/create-or-update-comment@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.build_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace

      - name: Report build
        run: |
          python scripts/post_check_to_patchworks.py -event ${{ github.event_name }} -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }})  -desc 'Build started' -iid '${{ inputs.issue_num }}#issuecomment-${{ inputs.build_comment_id }}' -state 'pending' -context 'build--${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }}' -token '${{ secrets.PATCHWORK_API }}'
        continue-on-error: true

      - name: Make log name
        id: build-log
        run: |
          export BUILD_LOG_NAME=$(tail -n 1 patches/${{ inputs.patch_name }})-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }}-build-log
          echo "build_log_name=$BUILD_LOG_NAME" >> $GITHUB_OUTPUT

      ### begin common

      - name: Install dependencies
        run: |
          sudo ./.github/setup-apt.sh
          sudo apt install python3 -y
          sudo apt install python-is-python3 -y

      - name: Configure
        run: |
          mkdir build
          cd build
          if [ "${{ inputs.multilib }}" == "multilib" ]; then
            ../configure --prefix=$(pwd) --with-multilib-generator="rv64gcv-lp64d--;rv32gcv-ilp32d--"
          else
            TARGET_TUPLE=($(echo ${{ inputs.target }} | tr "-" "\n"))
            ../configure --prefix=$(pwd) --with-multilib-generator="${TARGET_TUPLE[0]}-${TARGET_TUPLE[1]}--"
          fi

      - name: Build
        id: build-gcc
        run: |
          cd build
          set -o pipefail
          make -j $(nproc) ${{ inputs.mode }} 2>&1 | tee ${{ steps.build-log.outputs.build_log_name }}.txt
          set +o pipefail

      - name: Zip binaries
        run: |
          zip -r gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.patch_applied_gcchash }}-${{ inputs.multilib }}.zip build/bin

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.patch_applied_gcchash }}-${{ inputs.multilib }}
          path: |
            riscv-gnu-toolchain/gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.patch_applied_gcchash }}-${{ inputs.multilib }}.zip
          retention-days: 5

      ### end common

      - name: Zip build log
        if: ${{ always() && steps.build-gcc.outcome == 'failure' }}
        run: |
          zip ${{ steps.build-log.outputs.build_log_name }}.zip build/${{ steps.build-log.outputs.build_log_name }}.txt

      - name: Upload build log
        if: ${{ always() && steps.build-gcc.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build-log.outputs.build_log_name }}
          path: |
            riscv-gnu-toolchain/${{ steps.build-log.outputs.build_log_name }}.zip
          retention-days: 9

      - name: Build success report
        run: |
          if [ '${{ inputs.build_only }}' == 'true' ]; then
            python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Success' -comment ${{ inputs.build_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Build GCC' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.tot_hash }}
          else
            python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Success' -comment ${{ inputs.build_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Build GCC' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.baseline_hash }}
          fi
          printf "\n[Additional information](${{ inputs.additional_info }})\n" >> comment.md

      - name: Build failure report
        if: ${{ always() && steps.build-gcc.outcome == 'failure' }}
        run: |
          if [ '${{ inputs.build_only }}' == 'true' ]; then
            python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Build failure. Please check the ${{ steps.build-log.outputs.build_log_name }} artifact' -comment ${{ inputs.build_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Build GCC' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.tot_hash }}
          else
            python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Build failure. Please check the ${{ steps.build-log.outputs.build_log_name }} artifact' -comment ${{ inputs.build_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Build GCC' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.baseline_hash }}
          fi
          printf "\n[Additional information](${{ inputs.additional_info }})\n" >> comment.md

      - name: Update build complete report comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@v3
        id: build-complete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.build_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace
        continue-on-error: true

      - name: backoff
        if: ${{ always() && steps.build-complete.outcome == 'failure' }}
        run: |
          sleep 10

      - name: Retry build complete report comment
        if: ${{ always() && steps.build-complete.outcome == 'failure' }}
        uses: peter-evans/create-or-update-comment@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.build_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace

      - name: Report error on build-failure
        if: ${{ always() && steps.build-gcc.outcome == 'failure' }}
        run: |
          python scripts/post_check_to_patchworks.py -event ${{ github.event_name }} -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }})  -desc 'Build failed' -iid '${{ inputs.issue_num }}#issuecomment-${{ inputs.build_comment_id }}' -state 'fail' -context 'build--${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }}' -token '${{ secrets.PATCHWORK_API }}'
        continue-on-error: true

      - name: Report build success
        run: |
          python scripts/post_check_to_patchworks.py -event ${{ github.event_name }} -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }})  -desc 'Build passed' -iid '${{ inputs.issue_num }}#issuecomment-${{ inputs.build_comment_id }}' -state 'success' -context 'build--${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }}' -token '${{ secrets.PATCHWORK_API }}'
        continue-on-error: true

      - name: Build test starting report
        if: ${{ inputs.build_only != 'true' }}
        run: |
          python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Pending' -comment ${{ inputs.test_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Testsuite' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.baseline_hash }}
          printf "\n[Additional information](${{ inputs.additional_info }})\n" >> comment.md

      - name: Update test pending report comment
        if: ${{ inputs.build_only != 'true' }}
        uses: peter-evans/create-or-update-comment@v3
        id: test-pending
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.test_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace
        continue-on-error: true

      - name: backoff
        if: ${{ inputs.build_only != 'true' && steps.test-pending.outcome == 'failure' }}
        run: |
          sleep 10

      - name: Retry test pending report comment
        if: ${{ inputs.build_only != 'true' && steps.test-pending.outcome == 'failure' }}
        uses: peter-evans/create-or-update-comment@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.test_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace

      - name: Report testing
        if: ${{ inputs.build_only != 'true' }}
        run: |
          python scripts/post_check_to_patchworks.py -event ${{ github.event_name }} -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }})  -desc 'Testing started' -iid '${{ inputs.issue_num }}#issuecomment-${{ inputs.test_comment_id }}' -state 'pending' -context 'test' -token 'PLACEHOLDER'
        continue-on-error: true

      - name: Run Testsuite
        if: ${{ inputs.build_only != 'true' }}
        uses: ./.github/actions/common/run-testsuite
        with:
          mode: ${{ inputs.mode }}
          target: ${{ inputs.target }}
          gcchash: ${{ inputs.patch_applied_gcchash }}
          multilib: ${{ inputs.multilib }}

      - name: Build test complete report
        if: ${{ inputs.build_only != 'true' }}
        run: |
          python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -state 'Complete. Full report will be displayed once all targets are complete' -comment ${{ inputs.test_comment_id }} -target ${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.multilib }} -check 'Testsuite' -repo ewlu/gcc-precommit-ci -baseline ${{ inputs.baseline_hash }}
          printf "\n[Additional information](${{ inputs.additional_info }})\n" >> comment.md

      - name: Update test complete report comment
        if: ${{ inputs.build_only != 'true' }}
        uses: peter-evans/create-or-update-comment@v3
        id: test-complete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.test_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace
        continue-on-error: true

      - name: backoff
        if: ${{ inputs.build_only != 'true' && steps.test-complete.outcome == 'failure' }}
        run: |
          sleep 10

      - name: Retry test complete report comment
        if: ${{ inputs.build_only != 'true' && steps.test-complete.outcome == 'failure' }}
        uses: peter-evans/create-or-update-comment@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.test_comment_id }}
          body-path: riscv-gnu-toolchain/comment.md
          edit-mode: replace

