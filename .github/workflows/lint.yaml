name: Lint

on:
  workflow_call:
    inputs:
      patch_name:
        required: true
        type: string
      issue_num:
        required: true
        type: string
      lint_comment_id:
        required: true
        type: string

jobs:
  lint:
    runs-on: ubuntu-20.04
    permissions:
      issues: write
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    steps:
      - uses: actions/checkout@v3

      - name: Setup env
        uses: ./.github/actions/setup-env
        with:
          free_up_space: false

      - name: Download patches artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.patch_name }}-downloaded-patches
          path: ./riscv-gnu-toolchain

      - name: Extract patches
        run: |
          unzip ${{ inputs.patch_name }}-downloaded-patches.zip

      - name: Install prereqs
        run: |
          pip3 install termcolor unidiff

      - name: Report start linter
        run: |
          python scripts/post_check_to_patchworks.py -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }})  -desc 'Linter starting' -iid '${{ inputs.issue_num }}#issue-${{ inputs.lint_comment_id }}' -state 'pending' -context 'linter' -token 'PLACEHOLDER'

      # Only lint the last patch in the series since that's where the warning will be displayed
      - name: Lint patch
        id: lint
        run: |
          let count=$(ls -1 patches | wc -l)
          python ./scripts/check_GNU_style.py "./patches/patch-$count.patch" | tee "lint_results.txt"
          if (($(cat lint_results.txt | wc -l) > 0)); then
            echo "lint_failed=true" >> $GITHUB_OUTPUT
          else
            echo "lint_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create linter report
        if: ${{ steps.lint.outputs.lint_failed == 'true' }}
        run: |
          python ./scripts/generate_linter_fail_report.py --linter-log lint_results.txt --patch-name ${{ inputs.patch_name }}

      - name: Build lint failed comment report # reduce the number of lines in final comment so github always creates comment
        if: ${{ steps.lint.outputs.lint_failed == 'true' }}
        run: |
          echo "## Lint Status" > comment.md
          cat linter_fail_report.md >> comment.md
          head -c 65000 comment > trimmed_comment.md
          if [ $(cat trimmed_comment.md | wc -l) -ne $(cat comment.md | wc -l) ]; then printf "\n\`\`\`\nComment text has been trimmed. Please check logs for the untrimmed comment." >> trimmed_comment.md; fi
          printf "\n[Additional information](https://github.com/ewlu/gcc-precommit-ci/issues/${{ inputs.issue_num }})\n" >> trimmed_comment.md

      - name: Update lint failed comment report
        if: ${{ steps.lint.outputs.lint_failed == 'true' }}
        uses: peter-evans/create-or-update-comment@v3
        id: lint-fail
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.lint_comment_id }}
          body-path: riscv-gnu-toolchain/trimmed_comment.md
          edit-mode: replace

      - name: Add linter-failure Label to issue
        if: ${{ steps.lint.outputs.lint_failed == 'true' }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ inputs.issue_num }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['linter-failure']
            })

      - name: Report linter warning
        if: ${{ steps.lint.outputs.lint_failed == 'true' }}
        run: |
          python scripts/post_check_to_patchworks.py -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }})  -desc 'Lint failed' -iid '${{ inputs.issue_num }}#issue-${{ inputs.lint_comment_id }}' -state 'warning' -context 'linter' -token 'PLACEHOLDER'

      - name: Make lint passed comment
        if: ${{ steps.lint.outputs.lint_failed == 'true' }}
        run: |
          echo "## Lint Status" > lint_passed.md
          echo "Lint passed" >> lint_passed.md

      - name: Update lint passed comment report
        if: ${{ steps.lint.outputs.lint_failed == 'false' }}
        uses: peter-evans/create-or-update-comment@v3
        id: lint-pass
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.lint_comment_id }}
          body-path: riscv-gnu-toolchain/lint_passed.md
          edit-mode: replace

      - name: Report linter success
        if: ${{ steps.lint.outputs.lint_failed == 'false' }}
        run: |
          python scripts/post_check_to_patchworks.py -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 patches/${{ inputs.patch_name }})  -desc 'Lint passed' -iid '${{ inputs.issue_num }}#issue-${{ inputs.lint_comment_id }}' -state 'success' -context 'linter' -token 'PLACEHOLDER'

