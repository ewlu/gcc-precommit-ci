name: Generate-Summary

on:
  workflow_call:
    inputs:
      patch_name:
        required: true
        type: string
      baseline_hash:
        required: true
        type: string
      patch_applied_gcchash:
        required: true
        type: string
      build_only:
        required: true
        type: string
      tot_hash:
        required: true
        type: string
      issue_num:
        required: true
        type: string
      build_comment_id:
        required: true
        type: string
      test_comment_id:
        required: true
        type: string
      additional_info:
        required: true
        type: string

  workflow_dispatch:
    branches:
      - patchworks-ci
    inputs:
      baseline_hash:
        description: 'GCC Hash'
        required: true
      patch_applied_gcchash:
        description: 'GCC Hash of applied commit'
        required: true
      patch_name:
        description: 'Patch name to regenerate summary for'
        required: true

jobs:
  compare-artifacts:
    if: ${{ always() && inputs.build_only != 'true' }} # ensure comparison always runs even on error
    runs-on: ubuntu-20.04
    environment: production
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    steps:
      - uses: actions/checkout@v3

      - name: Setup env
        uses: ./.github/actions/setup-env
        with:
          free_up_space: false

      - name: Check workflow dispatch
        id: dispatch
        if: ${{ inputs.tot_hash == '' }} # tot_hash always set at apply tip of tree step in run_checks.yaml
        run: |
          echo "workflow_dispatch=true" >> $GITHUB_OUTPUT

      - name: Retrieve cache
        id: retrieve-cache
        uses: actions/cache@v3
        with:
          path: |
            riscv-gnu-toolchain/.git
            riscv-gnu-toolchain/binutils
            riscv-gnu-toolchain/dejagnu
            riscv-gnu-toolchain/gcc
            riscv-gnu-toolchain/gdb
            riscv-gnu-toolchain/glibc
            riscv-gnu-toolchain/musl
            riscv-gnu-toolchain/newlib
            riscv-gnu-toolchain/pk
            riscv-gnu-toolchain/qemu
          key: submodules-archive-5

      - name: Initalize gcc
        if: steps.retrieve-cache.outputs.cache-hit != 'true'
        run: |
          rm -rf gcc
          git clone git://gcc.gnu.org/git/gcc.git

      - name: Pull gcc
        id: gcc-hash
        run: |
          cd gcc
          git checkout master
          git pull

      - name: Create directories
        run: |
          mkdir current_logs
          mkdir temp
          mkdir summaries

      - name: Bump pyopenssl and crypto
        run: |
          sudo apt remove python3-pip
          wget https://bootstrap.pypa.io/get-pip.py
          sudo python3 get-pip.py
          pip install -U pyopenssl cryptography

      - name: Download baseline results
        run: |
          pip install pygithub==1.59.1 requests
          python ./scripts/download_artifact.py -name ${{ inputs.baseline_hash }}-current-logs -repo patrick-rivos/gcc-postcommit-ci -token ${{ secrets.GITHUB_TOKEN }} -outdir ./temp

      - name: Extract baseline results
        run: |
          mv ./temp/current_logs.zip .
          unzip current_logs.zip
          mv current_logs previous_logs

      - name: Separate multilib results
        run: |
          python scripts/separate_multilib_results.py -indir previous_logs -outdir previous_logs
          mv previous_logs/gcc-newlib-rv64gc-lp64d-${{ inputs.baseline_hash }}-non-multilib-report.log previous_logs/gcc-newlib-rv64gc-lp64d-${{ inputs.baseline_hash }}-multilib-report.log
          mv previous_logs/gcc-newlib-rv32gc-ilp32d-${{ inputs.baseline_hash }}-non-multilib-report.log previous_logs/gcc-newlib-rv32gc-ilp32d-${{ inputs.baseline_hash }}-multilib-report.log
          ls previous_logs
        continue-on-error: true

      # Download all current workflow artifacts

      - name: Print API usage info
        run: |
          curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/rate_limit

      - name: Download All targets
        uses: ./.github/actions/download-all-comparison-artifacts
        with:
          gcchash: ${{ inputs.patch_applied_gcchash }}
          token: ${{ secrets.GITHUB_TOKEN }}
          repo: 'ewlu/gcc-precommit-ci'

      - name: Print API usage info
        run: |
          curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/rate_limit

      - name: Extract artifacts
        run: |
          ls ./temp/
          mkdir -p current_logs
          for f in $(ls ./temp/*report.zip); do
            unzip $f -d ./current_logs || true
          done
          ls current_logs

      - name: Separate multilib logs
        run: |
          python scripts/separate_multilib_results.py -indir current_logs -outdir current_logs
        continue-on-error: true

      - name: Compare artifacts
        run: |
          ls current_logs
          python ./scripts/compare_all_artifacts.py -hash ${{ inputs.patch_applied_gcchash }}

      - name: Search for build failures
        run: |
          python scripts/update_issue_status.py -token ${{ secrets.GITHUB_TOKEN }} -comment ${{ inputs.build_comment_id }} -repo ewlu/gcc-precommit-ci -failure
          ls current_logs
        continue-on-error: true

      - name: Remove testsuite failures on build-only
        if: ${{ inputs.build_only == 'true' }}
        run: |
          rm current_logs/failed_testsuite.txt
        continue-on-error: true

      - name: Make artifact zips
        run: |
          zip -r summaries.zip summaries
          zip -r current_logs.zip current_logs
          zip -r previous_logs.zip previous_logs

      - name: Upload compare summaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.baseline_hash }}-summaries
          path: |
            riscv-gnu-toolchain/summaries.zip
          retention-days: 90

      - name: Upload current log failures
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.baseline_hash }}-current-logs
          path: |
            riscv-gnu-toolchain/current_logs.zip
          retention-days: 90

      - name: Upload baseline results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.baseline_hash }}-previous-logs
          path: |
            riscv-gnu-toolchain/previous_logs.zip
          retention-days: 90

    outputs:
      baseline_hash: ${{ inputs.baseline_hash }}
      workflow_dispatch: ${{ steps.dispatch.outputs.workflow_dispatch }}

  generate-issues:
    if: ${{ always() && inputs.build_only != 'true' }} # ensure generate issues always runs even on error
    needs: [compare-artifacts]
    runs-on: ubuntu-20.04
    permissions:
      issues: write
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    steps:
      - uses: actions/checkout@v3

      - name: Setup env
        uses: ./.github/actions/setup-env
        with:
          free_up_space: false

      - name: Download summaries artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.compare-artifacts.outputs.baseline_hash }}-summaries
          path: ./riscv-gnu-toolchain

      - name: Download current logs artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.compare-artifacts.outputs.baseline_hash }}-current-logs
          path: ./riscv-gnu-toolchain

      - name: Download previous logs artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.compare-artifacts.outputs.baseline_hash }}-previous-logs
          path: ./riscv-gnu-toolchain

      - name: Download patches artifact
        if: ${{ needs.compare-artifacts.outputs.workflow_dispatch == 'true' }}
        run: |
          sudo apt remove python3-pip
          wget https://bootstrap.pypa.io/get-pip.py
          sudo python3 get-pip.py
          pip install -U pyopenssl cryptography pygithub==1.59.1 requests
          mkdir temp
          python ./scripts/download_artifact.py -name ${{ inputs.patch_name }}-downloaded-patches -repo ewlu/gcc-precommit-ci -token ${{ secrets.GITHUB_TOKEN }} -outdir ./temp -repo ewlu/gcc-precommit-ci
          ls temp
          unzip temp/${{ inputs.patch_name }}-downloaded-patches

      - name: Download patches artifact
        if: ${{ needs.compare-artifacts.outputs.workflow_dispatch != 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.patch_name }}-downloaded-patches
          path: ./riscv-gnu-toolchain

      - name: Extract patches
        run: |
          unzip ${{ inputs.patch_name }}-downloaded-patches.zip

      - name: Print API usage info
        run: |
          curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/rate_limit

      - name: Aggregate information
        run: |
          unzip summaries.zip
          unzip current_logs.zip
          unzip previous_logs.zip
          python ./scripts/aggregate.py \
            -chash ${{ inputs.patch_applied_gcchash }} \
            -patch ${{ inputs.patch_name }} \
            -o temp_comment.md
          echo "## Testsuite Status" > comment.md
          tail -n+5 temp_comment.md >> comment.md
          cat comment.md

      - name: Print API usage info
        run: |
          curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/rate_limit

      - name: Trim comment length # reduce the number of lines in final comment so github always creates comment
        run: |
          head -c 64000 comment.md > trimmed_comment.md
          if [ $(cat trimmed_comment.md | wc -l) -ne $(cat comment.md | wc -l) ]; then printf "\n\`\`\`\nComment text has been trimmed. Please check logs for the untrimmed comment." >> trimmed_comment.md; fi
          printf "\n[Additional information](${{ inputs.additional_info }})\n" >> trimmed_comment.md
          cat trimmed_comment.md

      - name: Update test report comment
        uses: peter-evans/create-or-update-comment@v3
        id: test-report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          comment-id: ${{ inputs.test_comment_id }}
          body-path: riscv-gnu-toolchain/trimmed_comment.md
          edit-mode: replace

      - name: Output issue labels
        id: issue-labels
        run: |
          export LABELS=$(cat labels.txt)
          echo "issue_labels=$LABELS" >> $GITHUB_OUTPUT

      - name: Add New regressions Label to Issue
        if: ${{ contains(steps.issue-labels.outputs.issue_labels, 'new-regressions') }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ inputs.issue_num }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['new-regressions']
            })

      - name: Report Failure
        if: ${{ (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && contains(steps.issue-labels.outputs.issue_labels, 'build-failure') || contains(steps.issue-labels.outputs.issue_labels, 'testsuite-failure') || contains(steps.issue-labels.outputs.issue_labels, 'new-regressions') }}
        id: report-failure
        run: |
          python scripts/post_check_to_patchworks.py -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 ./patches/${{ inputs.patch_name }} -desc 'Testing failed' -iid '${{ inputs.issue_num }}#issue-${{ inputs.test_comment_id }}' -state 'fail' -context 'test' -token 'PLACEHOLDER'
        continue-on-error: true

      - name: Report Success
        if: ${{ (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && steps.report-failure.outcome == 'skipped' }}
        id: report-success
        run: |
          python scripts/post_check_to_patchworks.py -repo ewlu/gcc-precommit-ci -pid $(tail -n 1 ./patches/${{ inputs.patch_name }} -desc 'Testing passed' -iid '${{ inputs.issue_num }}#issue-${{ inputs.test_comment_id }}' -state 'success' -context 'test' -token 'PLACEHOLDER'
        continue-on-error: true
